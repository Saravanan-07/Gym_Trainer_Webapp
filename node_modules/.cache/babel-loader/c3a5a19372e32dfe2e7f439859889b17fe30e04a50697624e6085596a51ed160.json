{"ast":null,"code":"var _jsxFileName = \"/Users/sachivmk/REACTLEARNING/gym_app-main/sachiv/new/src/context/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useState, useContext } from 'react';\n\n// // Create context\n// const AuthContext = createContext();\n\n// // Provider component\n// export const AuthProvider = ({ children }) => {\n//   // State to manage user and admin authentication\n//   const [user, setUser] = useState(null);\n//   const [admin, setAdmin] = useState(null);\n\n//   // Login function for user\n//   const loginUser = (userData) => {\n//     setUser(userData);\n//     setAdmin(null); // Ensure admin is not logged in if a user logs in\n//   };\n\n//   // Logout function for user\n//   const logoutUser = () => {\n//     setUser(null);\n//   };\n\n//   // Login function for admin\n//   const loginAdmin = (adminData) => {\n//     setAdmin(adminData);\n//     setUser(null); // Ensure user is not logged in if an admin logs in\n//   };\n\n//   // Logout function for admin\n//   const logoutAdmin = () => {\n//     setAdmin(null);\n//   };\n\n//   // Provide context values\n//   return (\n//     <AuthContext.Provider value={{ user, admin, loginUser, logoutUser, loginAdmin, logoutAdmin }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// // Custom hook for using auth context\n// export const useAuth = () => {\n//   return useContext(AuthContext);\n// };\nimport React, { createContext, useState, useContext } from 'react';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // State to manage user and admin authentication\n  const [user, setUser] = useState(null);\n  const [admin, setAdmin] = useState(null);\n\n  // Login function for user\n  const loginUser = userData => {\n    setUser(userData);\n    setAdmin(null); // Ensure admin is not logged in if a user logs in\n  };\n\n  // Logout function for user\n  const logoutUser = () => {\n    setUser(null);\n  };\n\n  // Login function for admin\n  const loginAdmin = adminData => {\n    setAdmin(adminData);\n    setUser(null); // Ensure user is not logged in if an admin logs in\n  };\n\n  // Logout function for admin\n  const logoutAdmin = () => {\n    setAdmin(null);\n  };\n\n  // Combined logout function\n  const logout = () => {\n    if (user) {\n      logoutUser();\n    }\n    if (admin) {\n      logoutAdmin();\n    }\n  };\n\n  // Provide context values\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      admin,\n      loginUser,\n      logout,\n      loginAdmin,\n      logoutAdmin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for using auth context\n_s(AuthProvider, \"xfRIveRji225OVlKg/YkyS0fkXk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","admin","setAdmin","loginUser","userData","logoutUser","loginAdmin","adminData","logoutAdmin","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/sachivmk/REACTLEARNING/gym_app-main/sachiv/new/src/context/AuthContext.jsx"],"sourcesContent":["// import React, { createContext, useState, useContext } from 'react';\r\n\r\n// // Create context\r\n// const AuthContext = createContext();\r\n\r\n// // Provider component\r\n// export const AuthProvider = ({ children }) => {\r\n//   // State to manage user and admin authentication\r\n//   const [user, setUser] = useState(null);\r\n//   const [admin, setAdmin] = useState(null);\r\n\r\n//   // Login function for user\r\n//   const loginUser = (userData) => {\r\n//     setUser(userData);\r\n//     setAdmin(null); // Ensure admin is not logged in if a user logs in\r\n//   };\r\n\r\n//   // Logout function for user\r\n//   const logoutUser = () => {\r\n//     setUser(null);\r\n//   };\r\n\r\n//   // Login function for admin\r\n//   const loginAdmin = (adminData) => {\r\n//     setAdmin(adminData);\r\n//     setUser(null); // Ensure user is not logged in if an admin logs in\r\n//   };\r\n\r\n//   // Logout function for admin\r\n//   const logoutAdmin = () => {\r\n//     setAdmin(null);\r\n//   };\r\n\r\n//   // Provide context values\r\n//   return (\r\n//     <AuthContext.Provider value={{ user, admin, loginUser, logoutUser, loginAdmin, logoutAdmin }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// // Custom hook for using auth context\r\n// export const useAuth = () => {\r\n//   return useContext(AuthContext);\r\n// };\r\nimport React, { createContext, useState, useContext } from 'react';\r\n\r\n// Create context\r\nconst AuthContext = createContext();\r\n\r\n// Provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  // State to manage user and admin authentication\r\n  const [user, setUser] = useState(null);\r\n  const [admin, setAdmin] = useState(null);\r\n\r\n  // Login function for user\r\n  const loginUser = (userData) => {\r\n    setUser(userData);\r\n    setAdmin(null); // Ensure admin is not logged in if a user logs in\r\n  };\r\n\r\n  // Logout function for user\r\n  const logoutUser = () => {\r\n    setUser(null);\r\n  };\r\n\r\n  // Login function for admin\r\n  const loginAdmin = (adminData) => {\r\n    setAdmin(adminData);\r\n    setUser(null); // Ensure user is not logged in if an admin logs in\r\n  };\r\n\r\n  // Logout function for admin\r\n  const logoutAdmin = () => {\r\n    setAdmin(null);\r\n  };\r\n\r\n  // Combined logout function\r\n  const logout = () => {\r\n    if (user) {\r\n      logoutUser();\r\n    }\r\n    if (admin) {\r\n      logoutAdmin();\r\n    }\r\n  };\r\n\r\n  // Provide context values\r\n  return (\r\n    <AuthContext.Provider value={{ user, admin, loginUser, logout, loginAdmin, logoutAdmin }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for using auth context\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":";;;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMY,SAAS,GAAIC,QAAQ,IAAK;IAC9BJ,OAAO,CAACI,QAAQ,CAAC;IACjBF,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClB,CAAC;;EAED;EACA,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACvBL,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;;EAED;EACA,MAAMM,UAAU,GAAIC,SAAS,IAAK;IAChCL,QAAQ,CAACK,SAAS,CAAC;IACnBP,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC;;EAED;EACA,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxBN,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;;EAED;EACA,MAAMO,MAAM,GAAGA,CAAA,KAAM;IACnB,IAAIV,IAAI,EAAE;MACRM,UAAU,CAAC,CAAC;IACd;IACA,IAAIJ,KAAK,EAAE;MACTO,WAAW,CAAC,CAAC;IACf;EACF,CAAC;;EAED;EACA,oBACEd,OAAA,CAACC,WAAW,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEZ,IAAI;MAAEE,KAAK;MAAEE,SAAS;MAAEM,MAAM;MAAEH,UAAU;MAAEE;IAAY,CAAE;IAAAX,QAAA,EACtFA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAjB,EAAA,CA7CaF,YAAY;AAAAoB,EAAA,GAAZpB,YAAY;AA8CzB,OAAO,MAAMqB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAO1B,UAAU,CAACG,WAAW,CAAC;AAChC,CAAC;AAACuB,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}